import { async } from 'regenerator-runtime';
import { TIMEOUT_SECS } from './config.js';

const timeout = function (s) {
  return new Promise(function (_, reject) {
    setTimeout(function () {
      reject(new Error(`Request took too long! Timeout after ${s} second`));
    }, s * 1000);
  });
};

export const getJSON = async function (url) {
  try {
    const res = await Promise.race([fetch(url), timeout(TIMEOUT_SECS)]);
    const data = await res.json();

    // if we have an invalid id, generate a more informative error message based on the error generated by
    // the api (rather than the default browser error)
    if (!res.ok) throw new Error(`${data.message}, ${res.status}`);

    return data; // resolved value of the promise
  } catch (err) {
    throw err; // to reject the promise and propagate the error
  }
};
